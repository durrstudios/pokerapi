var betButton,bet=0,recentAction=[],actionsLog="";const playersAPI="https://pokerapi.darwincereska.repl.co/api/players/",betAPI="https://pokerapi.darwincereska.repl.co/api/bets/",checkSeconds=5,checkRefresh=5e3,canvasDimentions=500;class Player{constructor(e,t=0){this.name=e,this.balance=t}deposit(e){this.balance+=e,console.log(`${this.name} deposited $${e}. New balance: $${this.balance}`),AddAction(`${this.name} deposited $${e}. New balance: $${this.balance}`)}withdraw(e){e<=this.balance?(this.balance-=e,console.log(`${this.name} withdrew $${e}. New balance: $${this.balance}`),AddAction(`${this.name} withdrew $${e}. New balance: $${this.balance}`)):(console.log(`${this.name} doesn't have sufficient funds.`),AddAction(`${this.name} doesn't have sufficient funds.}`))}getBalance(){console.log(`${this.name}'s current balance: $${this.balance}`)}bet(e){e<=this.balance?(this.balance-=e,bet+=e,console.log(`${this.name} placed a bet of $${e}. Good luck!`),AddAction(`${this.name} placed a bet of $${e}. Good luck!`)):(console.log(`${this.name} doesn't have sufficient funds to place a bet.`),AddAction(`${this.name} doesn't have sufficient funds to place a bet.`))}win(e){this.balance+=e,bet=0,console.log(`${this.name} won $${e}! New balance: $${this.balance}`),AddAction(`${this.name} won $${e}! New balance: $${this.balance}`),allBALANCE()}}const players={},playerNames=[];function checkAndPlaceBet(){fetch(betAPI).then((e=>e.json())).then((e=>{if(e?.length>0)for(i=0;i<e.length;i++){let t=e[i];BET(t.name,int(t.bet))}else console.log("No new bets changed.")})).catch((e=>{console.error("Error fetching data:",e)}))}function setup(){createCanvas(500,500),betNameInput=createInput().size(50,15).attribute("placeholder","Name"),betNumInput=createInput().size(50,15).attribute("placeholder","Amount"),betButton=createButton("Bet").mousePressed(BETBUTTON),winInput=createInput().position(200).size(50,15).attribute("placeholder","Name"),winButton=createButton("Win").position(250).mousePressed(WINBUTTON),showBalanceButton=createButton("Show Balances").position(500/1.27).mousePressed(allBALANCE)}function draw(){background(53,101,77),strokeWeight(4),drawingContext.setLineDash([5,10]),stroke(255,0,0),line(0,70,500,70),drawingContext.setLineDash([5,10]),stroke(255),line(8,70,500,70),drawingContext.setLineDash([5,10]),stroke(255,0,0),line(8,5,500,5),drawingContext.setLineDash([5,10]),stroke(255),line(0,5,500,5),textSize(13),fill(255),stroke(0),strokeWeight(2),text(`Recent Action: ${actionsLog}`,10,450),textSize(25),text(`BETS: $${bet}`,10,50),textSize(15),text(`Players: ${playerNames}`,10,100),textSize(16),text(`Player Balances: ${allBALANCE()}`,10,150)}function BETBUTTON(e,t=50){BET(betNameInput.value(),int(betNumInput.value()))}function WINBUTTON(e){WIN(winInput.value())}function makePlayers(e=1e3){playerNames.forEach((t=>{players[t]=new Player(t,e)})),PLAYERS()}function PLAYERS(){console.log(players)}function WIN(e,t=bet){players[e].win(t),allBALANCE()}function BET(e,t=50){players[e].bet(t)}function BALANCE(e){players[e].getBalance()}function allBALANCE(){let e="";return playerNames.forEach((t=>{e+=`\n\n${players[t].name}: $${players[t].balance}`})),e}function DEPOSIT(e,t){players[e].deposit(t)}function AddAction(e){actionsLog=e+"\n"+actionsLog,recentAction.push(e)}function wipeAPIBets(){fetch(betAPI,{method:"DELETE",headers:{"Content-Type":"application/json"}})}fetch(playersAPI).then((e=>e.json())).then((e=>{console.log("Received data:"),console.log(e),playerNames.push(...e.map((e=>e.name))),console.log(playerNames),makePlayers(),wipeAPIBets()})).catch((e=>{console.error("Error:",e)})),console.log("All balance is running"),setInterval(checkAndPlaceBet,5e3);
